{"version":3,"sources":["common/util.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAQ,e,cAAA,S;;;sBAEK,I;;;;;uBAEX,uB,oCAAwB,Y,EAA8B;AACpD,cAAI,YAAU,UAAU,cAApB,GAAqC,YAAzC;AACA,iBAAO,KAAK,YAAL,CAAkB,IAAlB,CAAP;AACD,S;;uBAED,Y,yBAAa,I,EAAsB;AACjC,iBAAO,KAAK,OAAL,CAAa,WAAb,EAA0B,UAAC,CAAD;AAAA,mBAAO,EAAE,CAAF,EAAK,WAAL,EAAP;AAAA,WAA1B,CAAP;AACD,S;;uBAED,U,uBAAW,K,EAAO,U,EAAa;AAC7B,cAAI,qBAAqB,EAAzB;AACA,cAAI,cAAJ;AACA,+BAAiB,UAAjB,kHAA6B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAApB,IAAoB;;AAC3B,gBAAI,MAAM,gBAAN,IAA0B,QAAQ,MAAM,gBAA5C,EAA8D;AAC5D,sBAAQ,MAAM,KAAK,uBAAL,CAA6B,MAAM,gBAAN,CAAuB,IAAvB,CAA7B,CAAN,CAAR;AACD,aAFD,MAEM;AACJ,sBAAQ,MAAM,KAAK,uBAAL,CAA6B,IAA7B,CAAN,CAAR;AACD;AACD,gBAAI,KAAK,QAAL,CAAc,KAAd,CAAJ,EAA0B;AACxB,kBAAI,OAAO,KAAP,KAAiB,QAArB,EAAgC;AAC9B,wBAAQ,KAAK,WAAL,CAAiB,KAAjB,CAAR;AACD;AACD,iCAAmB,IAAnB,IAA2B,KAA3B;AACD;AACF;AACD,iBAAO,kBAAP;AACD,S;;uBAED,sB,mCAAuB,O,EAAS,Y,EAAc;AAC5C,cAAI,iBAAJ;AACA,gCAAiB,QAAQ,iBAAzB,yHAA4C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAAnC,IAAmC;;AAC1C,gBAAI,iBAAiB,KAAK,uBAAL,CAA6B,IAA7B,CAArB,EAAyD;AACvD,yBAAW,IAAX;AACA;AACD;AACF;AACD,iBAAO,QAAP;AACD,S;;uBAED,Q,qBAAS,I,EAAM;AACb,iBAAO,OAAQ,IAAR,KAAkB,WAAlB,IAAiC,SAAS,IAAjD;AACD,S;;uBAED,W,wBAAY,K,EAAO;AACjB,cAAI,UAAU,MAAd,EAAsB;AACpB,mBAAO,IAAP;AACD,WAFD,MAEO,IAAI,UAAU,OAAd,EAAuB;AAC5B,mBAAO,KAAP;AACD,WAFM,MAEA,IAAI,CAAC,KAAD,GAAS,EAAT,KAAgB,KAApB,EAA2B;AAChC,mBAAO,CAAC,KAAR;AACD;AACD,iBAAO,KAAP;AACD,S","file":"common/util.js","sourceRoot":"/source/","sourcesContent":["import {constants} from './constants';\r\n\r\nexport class Util {\r\n\r\n  getBindablePropertyName(propertyName: string): string {\r\n    let name = `${constants.bindablePrefix}${propertyName}`;\r\n    return this._unhyphenate(name);\r\n  }\r\n\r\n  _unhyphenate(name: string): string {\r\n    return name.replace(/-([a-z])/g, (g) => g[1].toUpperCase());\r\n  }\r\n\r\n  getOptions(model, properties ) {\r\n    let bindableproperites = {};\r\n    let value;\r\n    for (let prop of properties) {\r\n      if (model.abbrevProperties && prop in model.abbrevProperties) {\r\n        value = model[this.getBindablePropertyName(model.abbrevProperties[prop])];\r\n      }else {\r\n        value = model[this.getBindablePropertyName(prop)];\r\n      }\r\n      if (this.hasValue(value)) {\r\n        if (typeof value === 'string' ) {\r\n          value = this.processData(value);\r\n        }\r\n        bindableproperites[prop] = value;\r\n      }\r\n    }\r\n    return bindableproperites;\r\n  }\r\n\r\n  getControlPropertyName(options, propertyName) {\r\n    let property;\r\n    for (let prop of options.controlProperties) {\r\n      if (propertyName === this.getBindablePropertyName(prop)) {\r\n        property = prop;\r\n        break;\r\n      }\r\n    }\r\n    return property;\r\n  }\r\n\r\n  hasValue(prop) {\r\n    return typeof (prop) !== 'undefined' && prop !== null;\r\n  }\r\n\r\n  processData(value) {\r\n    if (value === 'true') {\r\n      return true;\r\n    } else if (value === 'false') {\r\n      return false;\r\n    } else if (+value + '' === value) {\r\n      return +value;\r\n    }\r\n    return value;\r\n  }\r\n}\r\n"]}