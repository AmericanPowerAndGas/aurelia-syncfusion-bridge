{"version":3,"sources":["common/util.js"],"names":["constants","Util","getBindablePropertyName","propertyName","name","bindablePrefix","_unhyphenate","replace","g","toUpperCase","getOptions","model","properties","bindableproperites","value","prop","abbrevProperties","hasOwnProperty","hasValue","processData","getControlPropertyName","options","property","controlProperties"],"mappings":";;;;;;;;;;;;;;;AAAQA,e,cAAAA,S;;;sBAEKC,I;;;;;uBAEXC,uB,oCAAwBC,Y,EAA8B;AACpD,cAAIC,YAAUJ,UAAUK,cAApB,GAAqCF,YAAzC;AACA,iBAAO,KAAKG,YAAL,CAAkBF,IAAlB,CAAP;AACD,S;;uBAEDE,Y,yBAAaF,I,EAAsB;AACjC,iBAAOA,KAAKG,OAAL,CAAa,WAAb,EAA0B,UAACC,CAAD;AAAA,mBAAOA,EAAE,CAAF,EAAKC,WAAL,EAAP;AAAA,WAA1B,CAAP;AACD,S;;uBAEDC,U,uBAAWC,K,EAAOC,U,EAAa;AAC7B,cAAIC,qBAAqB,EAAzB;AACA,cAAIC,cAAJ;AACA,+BAAiBF,UAAjB,kHAA6B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAApBG,IAAoB;;AAC3B,gBAAIJ,MAAMK,gBAAN,IAA0BD,QAAQJ,MAAMK,gBAAxC,IAA4DL,MAAMK,gBAAN,CAAuBC,cAAvB,CAAsCF,IAAtC,CAAhE,EAA6G;AAC3GD,sBAAQH,MAAM,KAAKT,uBAAL,CAA6BS,MAAMK,gBAAN,CAAuBD,IAAvB,CAA7B,CAAN,CAAR;AACD,aAFD,MAEM;AACJD,sBAAQH,MAAM,KAAKT,uBAAL,CAA6Ba,IAA7B,CAAN,CAAR;AACD;AACD,gBAAI,KAAKG,QAAL,CAAcJ,KAAd,CAAJ,EAA0B;AACxB,kBAAI,OAAOA,KAAP,KAAiB,QAArB,EAAgC;AAC9BA,wBAAQ,KAAKK,WAAL,CAAiBL,KAAjB,CAAR;AACD;AACDD,iCAAmBE,IAAnB,IAA2BD,KAA3B;AACD;AACF;AACD,iBAAOD,kBAAP;AACD,S;;uBAEDO,sB,mCAAuBC,O,EAASlB,Y,EAAc;AAC5C,cAAImB,iBAAJ;AACA,gCAAiBD,QAAQE,iBAAzB,yHAA4C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAAnCR,IAAmC;;AAC1C,gBAAIZ,iBAAiB,KAAKD,uBAAL,CAA6Ba,IAA7B,CAArB,EAAyD;AACvDO,yBAAWP,IAAX;AACA;AACD;AACF;AACD,iBAAOO,QAAP;AACD,S;;uBAEDJ,Q,qBAASH,I,EAAM;AACb,iBAAO,OAAQA,IAAR,KAAkB,WAAlB,IAAiCA,SAAS,IAAjD;AACD,S;;uBAEDI,W,wBAAYL,K,EAAO;AACjB,cAAIA,UAAU,MAAd,EAAsB;AACpB,mBAAO,IAAP;AACD,WAFD,MAEO,IAAIA,UAAU,OAAd,EAAuB;AAC5B,mBAAO,KAAP;AACD,WAFM,MAEA,IAAI,CAACA,KAAD,GAAS,EAAT,KAAgBA,KAApB,EAA2B;AAChC,mBAAO,CAACA,KAAR;AACD;AACD,iBAAOA,KAAP;AACD,S","file":"../../../common/util.js","sourcesContent":["import {constants} from './constants';\r\n\r\nexport class Util {\r\n\r\n  getBindablePropertyName(propertyName: string): string {\r\n    let name = `${constants.bindablePrefix}${propertyName}`;\r\n    return this._unhyphenate(name);\r\n  }\r\n\r\n  _unhyphenate(name: string): string {\r\n    return name.replace(/-([a-z])/g, (g) => g[1].toUpperCase());\r\n  }\r\n\r\n  getOptions(model, properties ) {\r\n    let bindableproperites = {};\r\n    let value;\r\n    for (let prop of properties) {\r\n      if (model.abbrevProperties && prop in model.abbrevProperties && model.abbrevProperties.hasOwnProperty(prop)) {\r\n        value = model[this.getBindablePropertyName(model.abbrevProperties[prop])];\r\n      }else {\r\n        value = model[this.getBindablePropertyName(prop)];\r\n      }\r\n      if (this.hasValue(value)) {\r\n        if (typeof value === 'string' ) {\r\n          value = this.processData(value);\r\n        }\r\n        bindableproperites[prop] = value;\r\n      }\r\n    }\r\n    return bindableproperites;\r\n  }\r\n\r\n  getControlPropertyName(options, propertyName) {\r\n    let property;\r\n    for (let prop of options.controlProperties) {\r\n      if (propertyName === this.getBindablePropertyName(prop)) {\r\n        property = prop;\r\n        break;\r\n      }\r\n    }\r\n    return property;\r\n  }\r\n\r\n  hasValue(prop) {\r\n    return typeof (prop) !== 'undefined' && prop !== null;\r\n  }\r\n\r\n  processData(value) {\r\n    if (value === 'true') {\r\n      return true;\r\n    } else if (value === 'false') {\r\n      return false;\r\n    } else if (+value + '' === value) {\r\n      return +value;\r\n    }\r\n    return value;\r\n  }\r\n}\r\n"]}