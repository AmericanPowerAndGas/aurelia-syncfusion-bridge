{"version":3,"sources":["common/widget-base.js"],"names":["getEventOption","Util","delayed","firstValue","WidgetBase","createWidget","option","allOption","getWidgetOptions","element","ejOptions","isEditor","createTwoWays","eWidget","widget","jQuery","$","controlName","data","templateProcessor","initWidgetDependancies","model","_change","evt","util","getBindablePropertyName","value","bind","ctx","overrideCtx","parentCtx","twoWays","len","length","i","prop","ej","createObject","addTwoways","newVal","isApp","viewModelProp","undefined","defaults","hasValue","propOptions","getOptions","controlProperties","eventOption","hasChildProperty","getChildProperties","Object","assign","options","PropertyName","childPropertyName","childCollection","childProperties","push","attached","forEach","template","setTemplates","propertyChanged","property","newValue","oldValue","modelValue","getControlPropertyName","isTwoway","detached","clearTempalte","destroy"],"mappings":"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","file":"../../../common/widget-base.js","sourcesContent":["import {getEventOption} from './events';\r\nimport {Util} from '../common/util';\r\nimport {delayed} from '../common/decorators';\r\n\r\nlet firstValue = {};\r\nexport class WidgetBase {\r\n/**\r\n* To Create an widget\r\n* @param option Object which contains  Element in which  widget will be created\r\n*/\r\n  createWidget(option) {\r\n    this.allOption = this.getWidgetOptions(option.element);\r\n    if (!this.ejOptions && !this.isEditor) {\r\n      this.createTwoWays();\r\n    }\r\n    this.eWidget = this.widget = jQuery($(option.element))[this.controlName](this.allOption).data(this.controlName);\r\n    if (this.templateProcessor) {\r\n      this.templateProcessor.initWidgetDependancies();\r\n    }\r\n    if (this.isEditor) {\r\n      this.widget.model._change = (evt) => {\r\n        if ('eValue' in this) {\r\n          this[this.util.getBindablePropertyName('value')] = evt.value;\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  bind(ctx, overrideCtx) {\r\n    this.parentCtx = overrideCtx;\r\n  }\r\n\r\n  createTwoWays() {\r\n    let model = this.allOption;\r\n    let twoWays = this.twoWays;\r\n    let len = twoWays.length;\r\n    for (let i = 0; i < len; i++) {\r\n      let prop = twoWays[i];\r\n      ej.createObject(prop, this.addTwoways(prop), model);\r\n    }\r\n  }\r\n\r\n  addTwoways(prop) {\r\n    let model = this;\r\n    let value = firstValue;\r\n    return function(newVal, isApp) {\r\n      if (value === firstValue) {\r\n        let viewModelProp = model.util.getBindablePropertyName(prop);\r\n        value = model[viewModelProp];\r\n        if (value === undefined) {\r\n          value = this.defaults[prop];\r\n        }\r\n        return value;\r\n      }\r\n      if (newVal === undefined) {\r\n        return value;\r\n      }\r\n      if (value === newVal) {\r\n        return null;\r\n      }\r\n      value = newVal;\r\n      if (!isApp && model.util.hasValue(newVal) ) {\r\n        let viewModelProp = model.util.getBindablePropertyName(prop);\r\n        model[viewModelProp] = newVal;\r\n      }\r\n      return null;\r\n    };\r\n  }\r\n/**\r\n* To get property and event options from the element\r\n* @param element Element from which options are acquired\r\n*/\r\n  getWidgetOptions(element) {\r\n    let propOptions;\r\n    if (this.ejOptions) {\r\n      propOptions = this.ejOptions;\r\n    } else {\r\n      propOptions = this.util.getOptions(this, this.controlProperties);\r\n    }\r\n    let eventOption = getEventOption(element);\r\n    if (this.hasChildProperty) {\r\n      this.getChildProperties(propOptions);\r\n    }\r\n    return Object.assign({}, propOptions, eventOption);\r\n  }\r\n\r\n  getChildProperties(options) {\r\n    let PropertyName = this.childPropertyName;\r\n    let childCollection = this[PropertyName];\r\n    let len = childCollection.length;\r\n    if (len) {\r\n      options[PropertyName] = [];\r\n      let childProperties = childCollection[0].controlProperties;\r\n      for (let i = 0; i < len; i++) {\r\n        options[PropertyName].push(this.util.getOptions(childCollection[i], childProperties));\r\n      }\r\n    }\r\n  }\r\n\r\n  @delayed()\r\n  attached() {\r\n    if (this.templateProcessor) {\r\n      this[this.childPropertyName].forEach(template => template.setTemplates());\r\n    }\r\n    this.util = new Util();\r\n    this.createWidget({ element: this.element });\r\n  }\r\n/**\r\n * To change widget model value\r\n * @param property The viewModel property name\r\n * @param newValue New value of the property\r\n * @param oldvalue Pld value of the property\r\n */\r\n  propertyChanged(property, newValue, oldValue) {\r\n    if (this.widget) {\r\n      let modelValue;\r\n      let prop = this.util.getControlPropertyName(this, property);\r\n      if (prop) {\r\n        if (prop === 'widget') {\r\n          return;\r\n        } else if (prop !== 'options') {\r\n          modelValue = this.widget.model[prop];\r\n          let isTwoway = typeof modelValue === 'function';\r\n          if (isTwoway) {\r\n            modelValue = modelValue();\r\n          }\r\n          if (modelValue !== newValue) {\r\n            if (isTwoway) {\r\n              newValue = this.addTwoways(prop);\r\n            }\r\n            this.widget.option(prop, newValue);\r\n          }\r\n        } else {\r\n          this.widget.option(newValue);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  detached() {\r\n    if (this.templateProcessor) {\r\n      this.templateProcessor.clearTempalte();\r\n    }\r\n    if (this.widget) {\r\n      this.widget.destroy();\r\n    }\r\n  }\r\n}\r\n\r\n"]}