{"version":3,"sources":["common/template.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQ,Y,+BAAA,M;;AACA,mB,sBAAA,a;AAAe,c,sBAAA,Q;AAAU,Y,sBAAA,M;AAAQ,oB,sBAAA,c;AAAgB,uB,sBAAA,iB;;AACjD,e,cAAA,S;;;0BAWK,Q,WAVZ,cAAiB,UAAU,aAA3B,c,UACA,Q,UACA,eAAe,UAAC,QAAD,EAAW,SAAX,EAAsB,OAAtB,EAA+B,WAA/B,EAA+C;AAC7D,YAAI,OAAO,QAAQ,SAAnB;AACA,YAAI,SAAS,EAAb,EAAiB;AACf,sBAAY,QAAZ,GAAuB,IAAvB;AACD;AACD,gBAAQ,SAAR,GAAoB,EAApB;AACD,OANA,C,UAOA,OAAO,iBAAP,C,wEAGC,kBAAY,MAAZ,EAAoB;AAAA;;AAAA;;AAClB,aAAK,QAAL,GAAgB,OAAO,kBAAP,CAA0B,QAA1C;AACD,O,2EAHA,Q","file":"common/template.js","sourceRoot":"/source/","sourcesContent":["import {inject} from 'aurelia-dependency-injection';\r\nimport {customElement, bindable, noView, processContent, TargetInstruction} from 'aurelia-templating';\r\nimport {constants} from './constants';\r\n@customElement(`${constants.elementPrefix}template`)\r\n@noView()\r\n@processContent((compiler, resources, element, instruction) => {\r\n  let html = element.innerHTML;\r\n  if (html !== '') {\r\n    instruction.template = html;\r\n  }\r\n  element.innerHTML = '';\r\n})\r\n@inject(TargetInstruction)\r\nexport class Template {\r\n  @bindable template;\r\n  constructor(target) {\r\n    this.template = target.elementInstruction.template;\r\n  }\r\n\r\n}\r\n"]}