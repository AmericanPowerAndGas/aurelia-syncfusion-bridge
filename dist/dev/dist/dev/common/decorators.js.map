{"version":3,"sources":["common/decorators.js"],"names":["generateBindables","controlName","inputs","twoWayProperties","abbrevProperties","observerCollection","target","key","descriptor","behaviorResource","metadata","getOrCreateOwn","resource","HtmlBehaviorResource","container","Container","instance","util","get","Util","bindingInstance","BindingEngine","push","len","length","prototype","arrayObserver","forEach","element","getBindablePropertyName","twoWays","controlProperties","i","option","nameOrConfigOrTarget","name","defaultBindingMode","bindingMode","twoWay","prop","BindableProperty","registerWith","delayed","taskQueue","TaskQueue","ptr","value","args","childPropertyName","queueTask","apply"],"mappings":"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","file":"../../../common/decorators.js","sourcesContent":["import {BindableProperty, HtmlBehaviorResource} from 'aurelia-templating';\r\nimport {Container} from 'aurelia-dependency-injection';\r\nimport {metadata} from 'aurelia-metadata';\r\nimport {TaskQueue} from 'aurelia-task-queue';\r\nimport { bindingMode, BindingEngine } from 'aurelia-binding';\r\nimport { Util } from './util';\r\n\r\nexport function generateBindables(controlName, inputs, twoWayProperties, abbrevProperties, observerCollection) {\r\n  return function(target, key, descriptor) {\r\n    let behaviorResource = metadata.getOrCreateOwn(metadata.resource, HtmlBehaviorResource, target);\r\n    let container = (Container.instance || new Container());\r\n    let util = container.get(Util);\r\n    let bindingInstance = container.get(BindingEngine);\r\n    inputs.push('options');\r\n    inputs.push('widget');\r\n    let len = inputs.length;\r\n    if (observerCollection) {\r\n      target.prototype.arrayObserver = [];\r\n      observerCollection.forEach((element) => {\r\n        target.prototype.arrayObserver.push(util.getBindablePropertyName(element));\r\n      });\r\n      target.prototype.bindingInstance = bindingInstance;\r\n    }\r\n    target.prototype.controlName = controlName;\r\n    target.prototype.twoWays = twoWayProperties ? twoWayProperties : [];\r\n    target.prototype.abbrevProperties = abbrevProperties ? abbrevProperties : [];\r\n    if (len) {\r\n      target.prototype.controlProperties = inputs;\r\n      for (let i = 0; i < len; i++) {\r\n        let option = inputs[i];\r\n        if (abbrevProperties && option in abbrevProperties) {\r\n          option = abbrevProperties[option];\r\n        }\r\n        let nameOrConfigOrTarget = {\r\n          name: util.getBindablePropertyName(option)\r\n        };\r\n\r\n        if (option === 'widget') {\r\n          nameOrConfigOrTarget.defaultBindingMode = bindingMode.twoWay;\r\n        }\r\n\r\n        let prop = new BindableProperty(nameOrConfigOrTarget);\r\n        prop.registerWith(target, behaviorResource, descriptor);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport function delayed() {\r\n  return function(target, key, descriptor) {\r\n    let taskQueue = (Container.instance || new Container()).get(TaskQueue);\r\n    let ptr = descriptor.value;\r\n\r\n    descriptor.value = function(...args) {\r\n      if (this.childPropertyName) {\r\n        taskQueue.queueTask(() => ptr.apply(this, args));\r\n      }else {\r\n        ptr.apply(this, args);\r\n      }\r\n    };\r\n\r\n    return descriptor;\r\n  };\r\n}\r\n"]}