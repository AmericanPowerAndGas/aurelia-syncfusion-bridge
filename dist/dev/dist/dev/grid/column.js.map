{"version":3,"sources":["grid/column.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQ,e,oBAAA,S;;AACA,uB,qBAAA,iB;;AACA,gB,iBAAA,U;AAAY,mB,iBAAA,a;AAAe,c,iBAAA,Q;;AAC3B,U,eAAA,I;;;wBAMK,M,WAJZ,gBAAc,UAAU,qBAAxB,C,UACA,cAAiB,UAAU,aAA3B,Y,UACA,kBAAkB,SAAlB,EAA6B,CAAC,UAAD,EAAa,cAAb,EAA6B,gBAA7B,EAA+C,eAA/C,EAAgE,cAAhE,EAAgF,eAAhF,EAAiG,UAAjG,EAA6G,UAA7G,EAAyH,kBAAzH,EAA6I,YAA7I,EAA2J,cAA3J,EAA2K,mBAA3K,EAAgM,mBAAhM,EAAqN,YAArN,EAAmO,cAAnO,EAAmP,UAAnP,EAA+P,qBAA/P,EAAsR,OAAtR,EAA+R,iBAA/R,EAAkT,iBAAlT,EAAqU,QAArU,EAA+U,kBAA/U,EAAmW,YAAnW,EAAiX,iBAAjX,EAAoY,UAApY,EAAgZ,YAAhZ,EAA8Z,cAA9Z,EAA8a,UAA9a,EAA0b,qBAA1b,EAAid,UAAjd,EAA6d,WAA7d,EAA0e,SAA1e,EAAqf,MAArf,EAA6f,iBAA7f,EAAghB,SAAhhB,EAA2hB,OAA3hB,CAA7B,C,UAGE,SAAY,UAAU,aAAtB,c;;;;;;;yBACD,Y,2BAAe;AACb,cAAI,KAAK,QAAL,CAAc,CAAd,CAAJ,EAAsB;AACpB,gBAAI,OAAO,IAAI,IAAJ,EAAX;AACA,iBAAK,KAAK,uBAAL,CAA6B,UAA7B,CAAL,IAAiD,KAAK,QAAL,CAAc,CAAd,EAAiB,QAAlE;AACD;AACF,S;;;;;;iBAN0D,E","file":"grid/column.js","sourceRoot":"/source/","sourcesContent":["import {constants} from '../common/constants';\r\nimport {generateBindables} from '../common/decorators';\r\nimport {inlineView, customElement, children} from '../common/common';\r\nimport {Util} from '../common/util';\r\n\r\n@inlineView(`${constants.aureliaTemplateString}`)\r\n@customElement(`${constants.elementPrefix}column`)\r\n@generateBindables('columns', ['clipMode', 'allowEditing', 'allowFiltering', 'allowGrouping', 'allowSorting', 'allowResizing', 'commands', 'cssClass', 'customAttributes', 'dataSource', 'defaultValue', 'disableHtmlEncode', 'displayAsCheckBox', 'editParams', 'editTemplate', 'editType', 'enableGroupByFormat', 'field', 'foreignKeyField', 'foreignKeyValue', 'format', 'headerTemplateID', 'headerText', 'headerTextAlign', 'isFrozen', 'isIdentity', 'isPrimaryKey', 'priority', 'showInColumnChooser', 'template', 'textAlign', 'tooltip', 'type', 'validationRules', 'visible', 'width'])\r\n\r\nexport class Column {\r\n  @children(`${constants.elementPrefix}template`) template = [];\r\n  setTemplates() {\r\n    if (this.template[0]) {\r\n      let util = new Util();\r\n      this[util.getBindablePropertyName('template')] = this.template[0].template;\r\n    }\r\n  }\r\n}\r\n\r\n"]}